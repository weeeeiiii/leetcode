#include <iostream>
#include <vector>
using namespace std;

int N;
double P,r;
vector<vector<int>> v;
int max_depth=1,number=1;
void DFS(int s,int depth)
{
    if(v[s].size()==0)
    {
        if(depth>max_depth)
        {
            max_depth=depth;
            number=1;
        }
        else if(depth==max_depth)
        {
            number++;
        }
        return;
    }
    for(int i=0;i<v[s].size();i++)
    {
        DFS(v[s][i],depth+1);
    }
}
int main()
{
    cin>>N>>P>>r;
    if(N==1)
    {
        printf("%.2f %d",P,number);
        return 0;
    }
    v.resize(N);
    int father;
    for(int i=0;i<N;i++)
    {
        int temp;
        cin>>temp;
        if(temp==-1)
        {
            father=i;
            continue;
        }
        v[temp].push_back(i);
    }
    DFS(father,1);
    for(int i=0;i<max_depth-1;i++)
    {
        P=P*(r/100+1);
    }
    printf("%.2f %d",P,number);
    return 0;
}
