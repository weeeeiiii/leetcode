int n,m;
class Solution {
public:
    bool check(int i,int j)
    {
        if(i>=n||j<0||j>=m) return false;
        return true;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        n=grid.size();  //行号
        m=grid[0].size();   //列号

        int dp[n][m][m];  //dp表示第n行r1在m列和r2在m列所收到的樱桃总数
        memset(dp,-1, sizeof(dp));

        dp[0][0][m-1]=grid[0][0]+grid[0][m-1];  //初始化dp
        int maxn=dp[0][0][m-1];
        for(int i=0;i<n;i++)
        {
            for(int j1=0;j1<m;j1++)
            {
                for(int j2=0;j2<m;j2++)
                {
                    if(dp[i][j1][j2]==-1) continue;
                    for(int x1=-1;x1<2;x1++)
                    {
                        for(int x2=-1;x2<2;x2++)
                        {
                            if(check(i+1,j1+x1)&&check(i+1,j2+x2))
                            {
                                if((j1+x1)!=(j2+x2))
                                    dp[i+1][j1+x1][j2+x2]=max(dp[i+1][j1+x1][j2+x2],dp[i][j1][j2]+grid[i+1][j1+x1]+grid[i+1][j2+x2]);
                                else
                                    dp[i+1][j1+x1][j2+x2]=max(dp[i+1][j1+x1][j2+x2],dp[i][j1][j2]+grid[i+1][j1+x1]);
                                if(maxn<dp[i+1][j1+x1][j2+x2]) maxn=dp[i+1][j1+x1][j2+x2];
                            }
                        }
                    }
                }
            }
        }
        return maxn;
    }
};
