#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

const int N=10010;
vector<int> G[N];
int shumu[N];
int n;
int maxn=0;
bool visited[N]={false};

void chushihua()
{
    for(int i=0;i<N;i++)
    {
        visited[i]=false;
    }
    maxn=0;
}

void DFS(int x,int length)
{
    if(length>maxn) maxn=length;
    for(int i=0;i<G[x].size();i++)
    {
        if(visited[G[x][i]]) continue;
        visited[G[x][i]]=true;
        DFS(G[x][i],length+1);
        visited[G[x][i]]=false;
    }
}

int lianton()
{
    int shu=0;
    for(int i=1;i<=n;i++)
    {
        int u;
        int sym=0;
        for(int j=1;j<=n;j++)
        {
            if(!visited[j])
            {
                u=j;
                sym=1;
                shu++;
                break;
            }
        }
        if(sym==0) return shu;
        queue<int> q;
        q.push(u);
        visited[u]=true;
        while(!q.empty())
        {
            int v=q.front();
            q.pop();
            for(int i=0;i<G[v].size();i++)
            {
                if(visited[G[v][i]]) continue;
                q.push(G[v][i]);
                visited[G[v][i]]=true;
            }
        }
    }
}

int main()
{
    cin>>n;
    for(int i=0;i<n-1;i++)
    {
        int root1,root2;
        cin>>root1>>root2;
        G[root1].push_back(root2);
        G[root2].push_back(root1);
    }

    int m=lianton();
    if(m!=1)
    {
        printf("Error: %d components",m);
        return 0;
    }
    for(int i=1;i<=n;i++)
    {
        chushihua();
        visited[i]=true;
        DFS(i,1);
        shumu[i]=maxn;
    }

    int M=shumu[1];
    for(int i=1;i<=n;i++)
    {
        if(M<shumu[i]) M=shumu[i];
    }
    for(int i=1;i<=n;i++)
    {
        if(shumu[i]==M)
        {
            printf("%d\n",i);
        }
    }
    return 0;
}
