#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <stack>
#include <cmath>
using namespace std;

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid[0].size();
        int n=obstacleGrid.size();
        long dp[n][m];

        memset(dp,0, sizeof(dp));

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if((i==0||j==0)&&obstacleGrid[i][j]!=1)  //边界上没有障碍物
                {
                    dp[i][j]=1;
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            if(dp[i][0]==0)
            {
                for(int j=i+1;j<n;j++)
                {
                    dp[j][0]=0;
                }
                break;
            }
        }
        for(int i=0;i<m;i++)
        {
            if(dp[0][i]==0)
            {
                for(int j=i+1;j<m;j++)
                {
                    dp[0][j]=0;
                }
                break;
            }
        }

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(obstacleGrid[i][j]==1)
                {
                    dp[i][j]=0;
                    continue;
                }
                else if(i==0||j==0) continue;
                else
                {
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return dp[n-1][m-1];
    }
};
