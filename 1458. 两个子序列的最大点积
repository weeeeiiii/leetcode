class Solution {
public:
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();

        int dp[n1+1][n2+1];
        for(int i=0;i<=n1;i++)
        {
            for(int j=0;j<=n2;j++)
            {
                dp[i][j]=-1e8;
            }
        }

        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                //选择i-1和j-1，但是不选择前面的
                dp[i][j]=nums1[i-1]*nums2[j-1];

                //选择i-1和j-1，但是选择前面的
                dp[i][j]=max(dp[i][j],nums1[i-1]*nums2[j-1]+dp[i-1][j-1]);

                //只选择i-1，不选择j-1
                dp[i][j]=max(dp[i][j],dp[i][j-1]);

                //只选择j-1，不选择i-1
                dp[i][j]=max(dp[i][j],dp[i-1][j]);

                //两个都不选择
                dp[i][j]=max(dp[i][j],dp[i-1][j-1]);
            }
        }
        return dp[n1][n2];
    }
};
